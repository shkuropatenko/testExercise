-- Задачи на уровень владения SQL
-- Дана следующая структура таблицы:
-- CREATE TABLE evaluations (
--     respondent_id UUID PRIMARY KEY,   -- ID респондента
--     department_id UUID,               -- ID департамента
--     name VARCHAR(64),                 -- имя респондента
--     bio LONGTEXT,                     -- биография респондента
--     gender BOOLEAN,                   -- пол: true - мужчина, false - женщина
--     value INTEGER                     -- Оценка
-- );
-- Задачи:
-- SQL-запрос без использования JOIN и подзапросов:
-- Сформулируйте SQL-запрос(без join-ов и подзапросов) для выбора всех департаментов, в которых каждый мужчина поставил оценку строго выше 5. Результатом должен быть список идентификаторов департаментов, соответствующих этому критерию.
-- Оптимизация поиска по биографии:
-- Предложите метод оптимизации поиска по полю bio для точного совпадения биографии респондента с записью из другой базы данных. Возможно, вам потребуется изменить структуру таблицы или предложить использование специализированных индексов или технологий. Опишите ваше решение и предложите необходимые изменения в структуре таблицы.

-- Формат ответа:
-- Для первой задачи предоставьте чистый SQL-запрос.
-- Для второй задачи предоставьте документацию или описание вашего подхода, включая любые предложения по изменению структуры таблицы и примеры использования новых функций или индексов.



-- Запрос для первой задачи
SELECT DISTINCT department_id
FROM evaluations e1
WHERE gender = true
AND value > 5
AND NOT EXISTS (
    SELECT 1
    FROM evaluations e2
    WHERE e1.department_id = e2.department_id
    AND e2.gender = false
);

-- Запрос для второй задачи
ALTER TABLE evaluations ADD FULLTEXT INDEX bio_ft_idx (bio);

-- Пример использования оператора MATCH AGAINST для выполнения точного совпадения
-- биографии респондента с записью из другой базы данных.
SELECT *
FROM evaluations
WHERE MATCH (bio) AGAINST ('искомая_биография');